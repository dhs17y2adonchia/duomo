@import "./_tailwind.base";

@import "./mixins/antialiasing";
@import "./mixins/border-radius-from-range";
@import "./mixins/box-shadow-from-named-map";
@import "./mixins/color-from-map";
@import "./mixins/display";
@import "./mixins/flex";
@import "./mixins/font-size-from-range";
@import "./mixins/font-style";
@import "./mixins/font-weight";
@import "./mixins/height-from-range";
@import "./mixins/margin-from-range";
@import "./mixins/margin-gap-from-range";
@import "./mixins/max-width-from-map";
@import "./mixins/min-height-from-range";
@import "./mixins/padding-from-range";
@import "./mixins/pointer-events";
@import "./mixins/position-from-range";
@import "./mixins/width-from-range";
@import "./mixins/z-index-from-range";

@import "./utils/conv-functions";
@import "./utils/generate-from-map";
@import "./utils/generate-from-range";
@import "./utils/get-dynamic-ampersand";
@import "./utils/safe-functions";

@import "./tailwind-colors";
@import "./vars";

$separator: "\\:";

@mixin custom-properties() {
	/* purgecss end start */
	html {
		@each $key, $value in $color-map {
			--#{$key}: #{$value}; // NOTE: Must use #{...} syntax.
		}
	}
	/* purgecss end ignore */
}

@mixin props($breakpoint: "") {
	@if not & {
		@include antialiasing;
	}
	@include margin-from-range(join(join($-scale, auto), $scale), rem);
	@include margin-gap-from-range(join(auto, $border-radius-scale /* FIXME? */), rem);
	@include padding-from-range($scale, rem);
	@include position-from-range((auto, 0));
	@include display;
	// @include flex;
	@include width-from-range(join(auto, $extended-scale), rem);
	@include max-width-from-map($breakpoint-map, px);
	@include height-from-range(join(auto, $extended-scale), rem);
	@include min-height-from-range(join(auto, 0), rem /* TODO: Change to px? */);
	@include font-style;
	@include font-weight;
	@include font-size-from-range($font-size-scale, rem);
	@if not & {
		@include color-from-map((color), "text", $color-map);
		@include color-from-map((background-color), "bg", $color-map);
	}
	@include border-radius-from-range($border-radius-scale, rem);
	@include box-shadow-from-named-map($box-shadow-named-map);
	@include z-index-from-range((auto, 0, 10, 20, 30, 40, 50));
	@include pointer-events;
}

@at-root {
	@include custom-properties;

	@include props;
	@each $key, $value in $breakpoint-map {
		@media (min-width: px($value)) {
			.#{$key} {
				@at-root {
					@include props;
				}
			}
		}
	}
}
