@import "_tailwind-base-2_0_0-alpha";

@import "./mixins/antialiasing";
@import "./mixins/border-radius-from-range";
@import "./mixins/box-shadow-from-named-map";
@import "./mixins/color-from-map";
@import "./mixins/display";
@import "./mixins/flex";
@import "./mixins/font";
@import "./mixins/margin-and-padding";
@import "./mixins/pointer-events";
@import "./mixins/position-from-range";
@import "./mixins/spacing-from-range";
@import "./mixins/width-and-height";
@import "./mixins/z-index-from-range";

@import "./utils/conv-functions";
@import "./utils/generate-from-map";
@import "./utils/generate-from-range";
@import "./utils/get-dynamic-ampersand";
@import "./utils/safe-functions";

@import "./tailwind-colors";
@import "./vars";

$separator: "\\:";

@mixin custom-properties() {
	// NOTE: Must use #{$value} syntax.
	//
	/* purgecss end start */
	html {
		@each $key, $value in $color-map {
			--#{$key}: #{$value};
		}
		@each $key, $value in $box-shadow-named-map {
			--#{$key}: #{$value};
		}
	}
	/* purgecss end ignore */
}

// // EXPERIMENTAL: wh-*
// $ampersand: get-dynamic-ampersand();
//
// @include generate-from-range((width, height), "wh", $extended-scale, rem);
// #{$ampersand}wh-full {
// 	width: 100%;
// 	height: 100%;
// }
// #{$ampersand}wh-screen {
// 	width: 100vw;
// 	height: 100vw;
// }

// prettier-ignore
$line-height-map: (
	"1":      1,
	"1\\.05": 1.05,
	"1\\.1":  1.1,
	"1\\.15": 1.15,
	"1\\.2":  1.2,
	"1\\.25": 1.25,
	"1\\.3":  1.3,
	"1\\.35": 1.35,
	"1\\.4":  1.4,
	"1\\.45": 1.45,
	"1\\.5":  1.5,
	"1\\.55": 1.55,
	"1\\.6":  1.6,
	"1\\.65": 1.65,
	"1\\.7":  1.7,
	"1\\.75": 1.75,
	"1\\.8":  1.8,
	"1\\.85": 1.85,
	"1\\.9":  1.9,
	"1\\.95": 1.95,
	"2":      2,
);

@mixin props {
	@if not & {
		@include antialiasing;
	}
	@include spacing-from-range(join(auto, $border-radius-scale /* FIXME? */), rem);
	@include margin-from-range(join(join($-scale, auto), $scale), rem);
	@include padding-from-range($scale, rem);
	@include position-from-range((auto, 0));
	@include display;
	@include flex;
	@include width-from-range(join(auto, $scale), rem);
	@include max-width-from-map($breakpoint-map, px);
	@include height-from-range(join(auto, $scale), rem);
	@include min-height-from-range(join(auto, 0), rem /* TODO: Change to px? */);
	@include font-style;
	@include font-weight;
	@include font-size-from-range($font-size-scale, rem);

	// TODO
	// @include line-height-from-range((1, 1.05, 1.1, 1.15, 1.2, 1.25, 1.3, 1.35, 1.4, 1.45, 1.5, 1.55, 1.6, 1.65, 1.7, 1.75, 1.8, 1.85, 1.9, 1.95, 2), passthrough);
	@include generate-from-map((line-height), "leading", $line-height-map, passthrough);

	@if not & {
		@include color-from-map((color), "text", $color-map);
		@include color-from-map((background-color), "bg", $color-map);
	}
	@include border-radius-from-range($border-radius-scale, rem);
	@include box-shadow-from-named-map($box-shadow-named-map);
	@include z-index-from-range((-1, auto, 0, 10, 20, 30, 40, 50));
	@include pointer-events;
}

@at-root {
	@include custom-properties;

	@include props;
	@each $key, $value in $breakpoint-map {
		@media (min-width: px($value)) {
			.#{$key} {
				@at-root {
					@include props;
				}
			}
		}
	}
}
