@use "sass:list";
@use "sass:map";
@use "sass:meta";

@use "configuration";
@use "helpers" as *;

@use "preflight/base" as *;
@use "preflight/modern-normalize" as *;
@use "preflight/vendored-font-smoothing" as *;

@use "meta/debug-space" as *;
@use "meta/debug" as *;
@use "meta/stagger" as *;

@use "core/aspect-ratio" as *;
@use "core/background-color" as *;
@use "core/border-radius" as *;
@use "core/border-width" as *;
@use "core/box-shadow" as *;
@use "core/color" as *;
@use "core/container" as *;
@use "core/grid" as *;
@use "core/group" as *;
@use "core/height" as *;
@use "core/layout" as *;
@use "core/margin" as *;
@use "core/max-width" as *;
@use "core/min-height" as *;
@use "core/opacity" as *;
@use "core/overflow" as *;
@use "core/padding" as *;
@use "core/pointer-events" as *;
@use "core/position" as *;
@use "core/shape" as *;
@use "core/stacks" as *;
@use "core/width" as *;
@use "core/z-index" as *;

// prettier-ignore
$variants: (
	group: (),
	layout: (responsive, hover, group-hover, focus, group-focus, touch, group-touch),
	stacks: (responsive),
	grid: (responsive),
	position: (responsive),
	margin: (responsive),
	padding: (responsive),
	width: (responsive),
	max-width: (responsive),
	container: (),
	height: (responsive),
	min-height: (responsive),
	shape: (responsive),
	aspect-ratio: (/* TODO */),
	background-color: (responsive, hover, group-hover, focus, group-focus, touch, group-touch),
	color: (responsive, hover, group-hover, focus, group-focus, touch, group-touch),
	border-width: (responsive),
	border-radius: (responsive),
	box-shadow: (responsive, hover, group-hover, focus, group-focus, touch, group-touch),
	opacity: (responsive, hover, group-hover, focus, group-focus, touch, group-touch),
	overflow: (responsive),
	z-index: (responsive, hover, group-hover, focus, group-focus, touch, group-touch),
	pointer-events: (responsive),
);

// Ex: take((1, 2, 3), 3) -> (1, 2)
@function take($list, $item) {
	$ret: ();
	@each $each in $list {
		@if $each != $item {
			$ret: list.append($ret, $each);
		}
	}
	@return $ret;
}

// NOTE: Dart Sass does not appear to support dynamic mixin invocation.
// Therefore mixins are statically invoked using conditions.
//
// https://github.com/sass/sass/issues/626
//
// prettier-ignore
@mixin call-mixin($mixin, $variants...) {
	@if $mixin == "group" { @include group($variants...); }
	@if $mixin == "layout" { @include layout($variants...); }
	@if $mixin == "stacks" { @include stacks($variants...); }
	@if $mixin == "grid" { @include grid($variants...); }
	@if $mixin == "position" { @include position($variants...); }
	@if $mixin == "margin" { @include margin($variants...); }
	@if $mixin == "padding" { @include padding($variants...); }
	@if $mixin == "width" { @include width($variants...); }
	@if $mixin == "max-width" { @include max-width($variants...); }
	@if $mixin == "container" { @include container($variants...); }
	@if $mixin == "height" { @include height($variants...); }
	@if $mixin == "min-height" { @include min-height($variants...); }
	@if $mixin == "shape" { @include shape($variants...); }
	@if $mixin == "aspect-ratio" { @include aspect-ratio($variants...); }
	@if $mixin == "background-color" { @include background-color($variants...); }
	@if $mixin == "color" { @include color($variants...); }
	@if $mixin == "border-width" { @include border-width($variants...); }
	@if $mixin == "border-radius" { @include border-radius($variants...); }
	@if $mixin == "box-shadow" { @include box-shadow($variants...); }
	@if $mixin == "opacity" { @include opacity($variants...); }
	@if $mixin == "overflow" { @include overflow($variants...); }
	@if $mixin == "z-index" { @include z-index($variants...); }
	@if $mixin == "pointer-events" { @include pointer-events($variants...); }
}

@at-root {
	// TODO: Integrate `custom-props-*`.
	@if not configuration.$headless {
		/*! duomo | MIT License | https://github.com/zaydek/duomo */

		// Preflight:
		/* purgecss start ignore */
		@include modern-normalize;
		@include base;
		@include vendored-font-smoothing;
		/* purgecss end ignore */

		@if configuration.$debugger {
			@include debug;
			@include debug-space;
		}
		@if configuration.$stagger {
			@include stagger;
		}

		@each $mk, $mv in $variants {
			@if $mv != layout {
				@include call-mixin($mk, var-join(none, take($mv, responsive))...);
			}
		}
		@each $mk, $mv in $variants {
			@if $mv != layout {
				@if list.index($mv, responsive) {
					@include call-mixin($mk, responsive);
				}
			}
		}
		// `layout` must be at the end:
		@if list.index($variants, layout) {
			// TODO: `responsive` should be last.
			@include layout(var-join(none, map.get($variants, layout))...);
		}
	}
}
