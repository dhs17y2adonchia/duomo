@use "sass:list";

@use "configuration";
@use "core";
@use "helpers";
@use "preflight";

@mixin preflight {
	/* purgecss start ignore */
	@include preflight.reset;
	@include preflight.debugger;
	@include preflight.stagger;
	// prettier-ignore
	@include preflight.custom-props-from-maps(
		(map: configuration.$font-family-map),
		(map: configuration.$color-map),
		(shorthand: "shadow", map: configuration.$shadow-map),
		(map: configuration.$timing-function-map),
	);
	/* purgecss end ignore */
}

$__zero-range: (0);
$__full-range: list.join(configuration.$negative-range, configuration.$standard-range);

@mixin props {
	@include core.group;
	@include core.display;
	@include core.stack-from-range($range: configuration.$standard-range, $resolver: rem);
	@include core.grid-from-range($range: configuration.$standard-range, $resolver: rem);
	@include core.margin-from-range($range: $__full-range, $resolver: rem);
	@include core.padding-from-range($range: configuration.$standard-range, $resolver: rem);
	@include core.position-from-range($range: $__zero-range, $resolver: rem);
	@include core.tooltip;
	@include core.width-from-range($range: configuration.$standard-range, $resolver: rem);
	@include core.max-width-from-breakpoint-map($breakpoint-map: configuration.$breakpoint-map);
	@include core.container-from-breakpoint-map($breakpoint-map: configuration.$breakpoint-map);
	@include core.height-from-range($range: configuration.$standard-range, $resolver: rem);
	@include core.min-height;
	@include core.whitespace;
	@include core.text-align;
	@include core.font-weight;
	@include core.font-size-from-range($range: configuration.$font-size-range, $resolver: rem);
	@include core.letter-spacing($range: configuration.$letter-spacing-range, $resolver: em);
	@include core.line-height-from-range($range: configuration.$line-height-range);
	@include core.text-decoration;
	@include core.color-from-map($map: configuration.$color-map, $opacity-range: configuration.$opacity-range);
	@include core.background-color-from-map($map: configuration.$color-map, $opacity-range: configuration.$opacity-range);
	@include core.border-width-from-range($range: configuration.$border-width-range, $resolver: rem);
	@include core.border-color-from-map($map: configuration.$color-map, $opacity-range: configuration.$opacity-range);
	@include core.border-radius-from-range($range: configuration.$border-radius-range, $resolver: rem);
	@include core.box-shadow-from-map($map: configuration.$shadow-map);
	@include core.overflow;
	@include core.z-index-from-range($range: configuration.$z-index-range);
	@include core.pointer-events;
	@include core.transition($default-duration: 300ms, $default-timing-function: configuration.$ease-out);
	@include core.transition-duration-from-range($range: helpers.range(0, 1000, 100));
	@include core.transition-timing-function-from-map($map: configuration.$timing-function-map);
}

@at-root {
	@if not configuration.$headless {
		/*! @zaydek/duomo | MIT License | https://github.com/zaydek/duomo */
		@include preflight;
		@include props;
		@each $key, $value in configuration.$breakpoint-map {
			@media (min-width: #{helpers.px($value)}) {
				.#{helpers.escape-breakpoint($key)} {
					@at-root {
						@include props;
					}
				}
			}
		}
	}
}
