@use "../helpers" as *;

// Alignment options are an escape hatch for the parent element.
$-align-opts: (
	align-stretch: stretch,
	align-start: flex-start,
	align-center: center,
	align-end: flex-end,
	align-baseline: baseline,
);

// Self-alignment options are an escape hatch for children elements.
$-align-self-opts: (
	align-self-stretch: stretch,
	align-self-start: flex-start,
	align-self-center: center,
	align-self-end: flex-end,
	align-self-baseline: baseline,
);

@mixin -zstack($variants...) {
	// https://twitter.com/bdc/status/1245399999300558853
	.zstack {
		--duomo-display: grid;
		display: grid;
		place-items: center;
		position: relative;
		width: min-content;
		height: min-content;
	}
	.zstack > * {
		grid-area: 1 / 1 / 1 / 1;
	}
}

@mixin -stack-modifiers($variants...) {
	@include variants($variants...) using ($v) {
		@each $mk, $mv in $-align-opts {
			#{variant($mk, $v)} {
				align-items: $mv;
			}
		}
		@each $mk, $mv in $-align-self-opts {
			#{variant($mk, $v)} {
				align-self: $mv;
			}
		}
	}
}

@mixin stacks($variants...) {
	@include -hstack($variants...);
	@include -vstack($variants...);

	.spacer {
		flex: 1 0 var(--space);
	}
	.spacer:first-child {
		flex: 1 0 0;
	}
	.spacer:last-child {
		flex: 1 0 0;
	}

	@include -stack-modifiers($variants...);

	// prettier-ignore
	@include variants($variants...) using ($v) {
		@include generate-from-range((
			variant: $v,
			shorthand: space,
			property: (--space),
			range: var-join(nrange(), range()),
			resolver: rem,
		));
	}
}
