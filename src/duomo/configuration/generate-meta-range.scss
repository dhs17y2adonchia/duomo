@use "sass:list";

// Generates a one-off range.
//
// Ex:
//
// generate-range(0, 10, 1)
// -> (0, 1, 2, 3, 4, 5, 6, 7, 8, 9)
//
@function generate-range($lower, $upper, $step: 1) {
	@if $upper <= $lower {
		@error "generate-range: `$upper` must be greater than `$lower`";
	} @else if $step < 0 {
		@error "generate-range: `$step` must be greater than `0`";
	}
	$range: ();
	@while $lower < $upper {
		$range: list.append($range, $lower, comma);
		$lower: $lower + $step;
	}
	@return $range;
}

// Generates a meta range from sets of one-off range descriptions.
//
// generate-meta-range((0, 10, 1), (10, 20, 2))
// -> ( 0,  1,  2,  3,  4,  5,  6,  7,  8,  9,
//     10, 12, 14, 16, 18)
//
@function generate-meta-range($descs...) {
	$meta-range: ();
	@each $desc in $descs {
		@if type-of($desc) == "number" {
			$meta-range: list.join($meta-range, $desc);
		} @else if type-of($desc) == "list" {
			$meta-range: list.join($meta-range, generate-range(list.nth($desc, 1), list.nth($desc, 2), list.nth($desc, 3)));
		}
	}
	@return $meta-range;
}

// // TODO: Convert to test.
// //
// // prettier-ignore
// $range: generate-meta-range(
// 	(  0,   10,  1),
// 	( 10,   20,  2),
// 	( 20,   40,  4),
// 	( 40,   80,  8),
// 	( 80,  160, 16),
// 	(160,  320, 32),
// 	(320,  640, 64),
// 	(640, 1280, 64),
//
// 	1280,
// );
