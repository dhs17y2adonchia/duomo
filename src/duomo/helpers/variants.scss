@use "sass:list";
@use "sass:meta";

@use "getters" as *;
@use "resolvers" as *;
@use "take" as *;

@function root($selector) {
	@return ".#{$selector}";
}
@function hover($selector) {
	@return ".hover\\:#{$selector}:hover";
}
@function focus($selector) {
	@return ".focus\\:#{$selector}:focus";
}
@function group-hover($selector) {
	@return ".group:hover.group-hover\\:#{$selector}, .group:hover .group-hover\\:#{$selector}";
}
@function group-focus($selector) {
	@return ".group:focus.group-focus\\:#{$selector}, .group:focus .group-focus\\:#{$selector}";
}

// EXPERIMENTAL
//
// prettier-ignore
@function touch($selector) {
	@return ".touch\\:#{$selector}:hover" + ", "
		".touch\\:#{$selector}:focus";
}

// EXPERIMENTAL
//
// prettier-ignore
@function group-touch($selector) {
	@return ".group:hover .group-touch\\:#{$selector}" + ", "
		".group:focus .group-touch\\:#{$selector}";
}

@function responsive($selector) {
	@return "#{&}#{$selector}";
}

// prettier-ignore
$-supported-variants: (
	root,
	responsive,
	hover,
	focus,
	group-hover,
	group-focus,
	touch,
	group-touch,
);

// Ex:
//
// @include variants($variants...) using ($v) {
//   ...
// }
//
@mixin variants($variants...) {
	@each $variant in $variants {
		@if not list.index($-supported-variants, $variant) {
			@error "variants: bad variant; $variant=#{$variant}";
		}
	}

	// @each $variant in take($variants, responsive) {
	// 	/* variant=#{$variant} */
	// 	@content ($variant);
	// }

	// FIXME: `take($variants, responsive)` is broken.
	@each $variant in $variants {
		@if $variant != responsive {
			/* variant=#{$variant} */
			@content ($variant);
		}
	}
	@if list.index($variants, responsive) {
		/* variant=responsive */
		@each $key, $n in breakpoints() {
			@media (min-width: px($n)) {
				.#{delimit($key)} {
					@at-root {
						@content (responsive);
					}
				}
			}
		}
	}
}

// Ex:
//
// {variant(bg-indigo-500, $v)} {
//   ...
// }
//
@function variant($selector, $variant-fn) {
	@if not meta.function-exists($variant-fn) {
		@error "variant: no such variant function; $variant-fn=#{$variant-fn}";
	}
	@return meta.call(meta.get-function($variant-fn), $selector);
}
