@use "sass:list";
@use "sass:meta";

@use "getters" as *;
@use "resolvers" as *;
@use "take" as *;

@use "../configuration";

@function core($selector) {
	@return ".#{$selector}";
}

@function hover($selector) {
	@return ".hover\\:#{$selector}:hover";
}
@function focus($selector) {
	@return ".focus\\:#{$selector}:focus";
}
@function touch($selector) {
	@return ".touch\\:#{$selector}:hover, .touch\\:#{$selector}:focus";
}

@function group-hover($selector) {
	@return ".group:hover .group-hover\\:#{$selector}";
}
@function group-focus($selector) {
	@return ".group:focus .group-focus\\:#{$selector}";
}
@function group-touch($selector) {
	@return ".group:hover .group-touch\\:#{$selector}, .group:focus .group-touch\\:#{$selector}";
}

@function responsive($selector) {
	@return "#{&}#{$selector}";
}

// Ex:
//
// @include variants($variants...) using ($v) {
//   ...
// }
//
@mixin variants($variants...) {
	// TODO: This logic doesnâ€™t need to be here.
	@if configuration.$env != development and configuration.$env != production {
		@error "variants: $env must be `development` or `production`; $env=#{$env}";
	}
	@if configuration.$env == development {
		@each $variant in take($variants, responsive) {
			@content ($variant);
		}
	} @else if configuration.$env == production {
		@content (take($variants, responsive));
	}
	@if list.index($variants, responsive) {
		@each $key, $n in breakpoints() {
			@media (min-width: px($n)) {
				.#{delimit($key)} {
					@at-root {
						@content (responsive);
					}
				}
			}
		}
	}
}

// Ex:
//
// {variant(bg-indigo-500, $v)} {
//   ...
// }
//
@function variant($selector, $variants) {
	@if list.length($variants) == 0 {
		@error "variant: variants are empty";
	}

	$concat-selector: "";
	@each $variant in $variants {
		@if not meta.function-exists($variant) {
			@error "variant: no such variant; $variant=#{$variant}";
		}
		$transformed-selector: meta.call(meta.get-function($variant), $selector);
		$concat-selector: $concat-selector + if($concat-selector == "", "", ", ") + $transformed-selector;
	}
	@return $concat-selector;
}
