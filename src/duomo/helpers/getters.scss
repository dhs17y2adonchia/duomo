@use "sass:map";
@use "sass:meta";

@use "../configuration";
@use "escapers";
@use "resolvers";

// Ex:
//
// n(-1) -> "-"
// n(0) -> ""
//
@function n($rv) {
	@if resolvers.passthrough($rv) {
		@return "";
	}
	@return if($rv < 0, "-", "");
}

// Ex: delimiter() -> "\:"
@function delimiter() {
	@return escapers.escape(configuration.$delimiter);
}

// Ex: delimit(sm) -> "sm\:"
@function delimit($key) {
	@return escapers.escape-breakpoint-key($key) + delimiter();
}

// Ex:
//
// desc(auto)  -> auto
// desc(0)     -> 0
// desc(100%)  -> max
// desc(100vw) -> screen
//
// TODO: Escape numbers?
@function desc($any, $as-percent: false) {
	// prettier-ignore
	$got: map.get((
		100%: full,
		100vw: screen,
		100vh: screen,
		9999px: full,
	), $any);
	@if $got {
		@return $got;
	}
	@if meta.type-of($any) == "number" and $as-percent {
		$rv: $any;
		@return $rv * 100;
	}
	@return $any;
}

// Ex: nrange() -> (-1, -2, -4, -8, ...)
@function nrange() {
	@return configuration.$nrange;
}

// Ex: range() -> (0, 1, 2, 4, 8, ...)
@function range() {
	@return configuration.$range;
}

// Ex: opacity-range() -> (0, 0.05, ...)
@function opacity-range() {
	@return configuration.$opacity-range;
}

@function -semantic-getter($getter-name, $map, $key) {
	$got: map.get($map, $key);
	@if not $got {
		@error "#{$getter-name}: no such key; $key=#{$key}";
	}
	@return $got;
}

@function font($key) {
	@return -semantic-getter("font", configuration.$font-map, $key);
}
@function color($key) {
	@return -semantic-getter("color", configuration.$color-map, $key);
}
@function extended-color($key) {
	@return -semantic-getter("extended-color", configuration.$extended-color-map, $key);
}
@function shadow($key) {
	@return -semantic-getter("shadow", configuration.$shadow-map, $key);
}
@function timing($key) {
	@return -semantic-getter("timing", configuration.$timing-map, $key);
}
@function breakpoint($key) {
	@return -semantic-getter("breakpoint", configuration.$breakpoint-map, $key);
}

@function fonts() {
	@return configuration.$font-map;
}
@function colors() {
	@return configuration.$color-map;
}
@function extended-colors() {
	@return configuration.$extended-color-map;
}
@function shadows() {
	@return configuration.$shadow-map;
}
@function timings() {
	@return configuration.$timing-map;
}
@function breakpoints() {
	@return configuration.$breakpoint-map;
}
