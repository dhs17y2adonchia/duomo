@use "sass:list";
@use "sass:map";

$separator: "\\:";

// TODO
@function get-dynamic-ampersand() {
	@if not & {
		@return ".";
	}
	@return & + $separator;
}

@function __new-rgba-map($color-map, $alpha-channel) {
	$merged: ();

	@each $k, $v in $color-map {
		$to-merge: ();
		@if $v == transparent or $v == currentColor {
			$to-merge: (#{$k}: #{$v});
		} @else {
			$to-merge: (#{$k}: rgba(list.nth($v, 1), list.nth($v, 2), list.nth($v, 3), #{$alpha-channel}));
		}
		$merged: map.merge($merged, $to-merge);
	}

	@return $merged;
}

@mixin __generate-colors($shorthand, $property, $color-map, $alpha-range) {
	$amp: get-dynamic-ampersand();

	@each $k, $v in __new-rgba-map($color-map, var(--#{$shorthand}-opacity)) {
		#{$amp}#{$shorthand}-#{$k} {
			--#{$shorthand}-opacity: 1;
			#{$property}: #{rgb(map.get($color-map, $k)...)};
			#{$property}: #{$v};
		}
	}
	@each $v in $alpha-range {
		#{$amp}#{$shorthand}-opacity-#{$v * 100} {
			--#{$shorthand}-opacity: #{$v};
		}
	}
}

@mixin color($color-map, $alpha-range) {
	@include __generate-colors("text", color, $color-map, $alpha-range);
}

@mixin background-color($color-map, $alpha-range) {
	@include __generate-colors("bg", background-color, $color-map, $alpha-range);
}

// TODO: Possibly move to border submodule.
@mixin border-color($color-map, $alpha-range) {
	@include __generate-colors("border", border-color, $color-map, $alpha-range);
}
