@use "sass:color";
@use "sass:map";
@use "sass:string";

@use "user/maps/colors-2" as colors;

@mixin custom-props-from-maps($maps...) {
	html {
		@each $m in $maps {
			@each $k, $v in map.get($m, "map") {
				$shorthand: map.get($m, "shorthand");
				@if not $shorthand {
					--#{$k}: #{$v};
				} @else {
					--#{$shorthand + "-" + $k}: #{$v};
				}
			}
		}
	}
}

@mixin __impl($shorthand, $prop, $color-map, $opacity-range) {
	@each $k, $v in colors.$color-map {
		.#{$shorthand}-#{"" + $k} {
			@if $k == transparent or $k == currentColor {
				color: #{$v};
			} @else {
				--#{$shorthand}-opacity: 1;
				#{$prop}: $v;
				#{$prop}: string.unquote(
					"rgba(#{color.red($v)}, #{color.green($v)}, #{color.blue($v)}, #{var(--#{$shorthand}-opacity)})"
				);
			}
		}
	}
	@each $v in $opacity-range {
		// TODO: Encode number, `escape`.
		.#{$shorthand}-opacity-#{$v * 100} {
			--#{$shorthand}-opacity: #{$v};
		}
	}
}

@mixin color-from-map($color-map, $opacity-range) {
	@include __impl("text", color, $color-map, $opacity-range);
}
@mixin background-color-from-map($color-map, $opacity-range) {
	@include __impl("bg", background-color, $color-map, $opacity-range);
}
@mixin border-color-from-map($color-map, $opacity-range) {
	@include __impl("border", border-color, $color-map, $opacity-range);
}

// prettier-ignore
@at-root {
	@include custom-props-from-maps(
		(map: colors.$color-map),
	);
	@include color-from-map(
		$color-map: colors.$color-map,
		$opacity-range: colors.$opacity-range,
	);
	@include background-color-from-map(
		$color-map: colors.$color-map,
		$opacity-range: colors.$opacity-range,
	);
	@include border-color-from-map(
		$color-map: colors.$color-map,
		$opacity-range: colors.$opacity-range,
	);
}
