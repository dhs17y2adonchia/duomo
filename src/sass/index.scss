@use "vars/maps";
@use "vars/ranges";

@use "meta";
@use "core";

@use "sass:list";

// @import "core/grid";
// @import "core/position";
// @import "core/text";
// @import "core/width-and-height";

@import "utils/conv-functions";
@import "utils/generate-from-map";
@import "utils/generate-from-range";
@import "utils/get-dynamic-ampersand";
@import "utils/safe-functions";

$separator: "\\:";

@mixin preflight {
	/* purgecss start ignore */
	@include meta.tailwind-base;
	// prettier-ignore
	@include meta.custom-props-from-maps(
		maps.$font-stack,
		maps.$shadow,
		maps.$timing-function,
	);
	@include meta.macos-retina;
	@include meta.stagger;
	@include meta.debugger;
	/* purgecss end ignore */
}

@mixin props {
	@include core.display;
	@include core.stacks-from-range($range: ranges.$standard, $resolver: rem);
	// @include grid-from-range(vars.$range); // FIXME

	@include core.margin-from-range(
		$range: list.join(list.join(ranges.$negative, auto), ranges.$standard),
		$resolver: rem
	);
	@include core.padding-from-range($range: ranges.$standard, $resolver: rem);

	// @include position-from-range((0)); // No range
	// @include width-from-range(ranges.$standard, rem);

	// TODO: We need a function to interpolate a breakpoint map.
	// @include width-from-range(($xs, $sm, $md, $lg, $xl), px);
	// // TODO
	// $amp: get-dynamic-ampersand();
	// @each $key, $value in ("full": 100%, "screen": 100vw) {
	// 	#{$amp}w-#{$key} {
	// 		width: #{$value};
	// 	}
	// }

	// @include max-width-from-map(maps.$breakpoint, px);
	// @include height-from-range(ranges.$standard, rem);
	// @include text-align;
	// @include font-style;
	// @include font-weight;
	// @include font-size-from-range(ranges.$font-size, rem);
	// // @include leading-from-map(ranges.$leading, passthrough);
	// @include line-decoration;

	@if not & {
		@include core.color($map: maps.$color, $alpha-range: ranges.$alpha);
		@include core.background-color($map: maps.$color, $alpha-range: ranges.$alpha);
	}
	@include core.border-width-from-range($range: ranges.$border-width, $resolver: rem);
	@if not & {
		@include core.border-color($map: maps.$color, $alpha-range: ranges.$alpha);
	}
	@include core.border-radius-from-range($range: ranges.$border-radius, $resolver: rem);
	@include core.shadows-from-map($map: maps.$shadow);
	@include core.overflow;
	@include core.z-index-from-range($range: ranges.$z-index);
	@include core.pointer-events;
}

@at-root {
	/*! @zaydek/duomo | MIT License | https://github.com/zaydek/duomo */
	// @include preflight;

	@include props;
	@each $key, $value in maps.$breakpoint {
		@media (min-width: #{px($value)}) {
			.#{$key} {
				@at-root {
					@include props;
				}
			}
		}
	}
}
