@use "vars/maps";
@use "vars/ranges";

@use "core/colors";

@use "meta";
@use "core";

@import "core/border-radius";
// @import "core/box-shadow";
@import "core/display";
@import "core/grid";
@import "core/margin";
@import "core/overflow";
@import "core/padding";
@import "core/pointer-events";
@import "core/position";
@import "core/stacks";
@import "core/text";
@import "core/width-and-height";
@import "core/z-index";

@import "utils/conv-functions";
@import "utils/generate-from-map";
@import "utils/generate-from-range";
@import "utils/get-dynamic-ampersand";
@import "utils/safe-functions";

$separator: "\\:";

@mixin preflight {
	/* purgecss start ignore */
	@include meta.tailwind-base;
	// prettier-ignore
	@include meta.custom-props-from-maps(
		maps.$font-stack,
		maps.$shadow,
		maps.$timing-function,
	);
	@include meta.macos-retina;
	@include meta.stagger;
	@include meta.debugger;
	/* purgecss end ignore */
}

@mixin props {
	@include display;
	@include stacks-from-range(ranges.$standard, rem);
	// @include grid-from-range(vars.$range); // FIXME
	@include margin-from-range(join(join(ranges.$negative, auto), ranges.$standard), rem);
	@include padding-from-range(ranges.$standard, rem);
	@include position-from-range((0)); // No range
	@include width-from-range(ranges.$standard, rem);

	// TODO: We need a function to interpolate a breakpoint map.
	// @include width-from-range(($xs, $sm, $md, $lg, $xl), px);
	// // TODO
	// $amp: get-dynamic-ampersand();
	// @each $key, $value in ("full": 100%, "screen": 100vw) {
	// 	#{$amp}w-#{$key} {
	// 		width: #{$value};
	// 	}
	// }

	@include max-width-from-map(maps.$breakpoint, px);
	@include height-from-range(ranges.$standard, rem);
	@include text-align;
	@include font-style;
	@include font-weight;
	@include font-size-from-range(ranges.$font-size, rem);
	// @include leading-from-map(ranges.$leading, passthrough);
	@include line-decoration;

	@if not & {
		@include colors.color(maps.$color, ranges.$alpha);
		@include colors.background-color(maps.$color, ranges.$alpha);
		@include colors.border-color(maps.$color, ranges.$alpha);
	}

	@include border-radius-from-range(ranges.$border-radius, rem);
	// @include box-shadow-from-named-map(maps.$shadow); // Do we need `named-map`?
	@include overflow;
	@include z-index-from-range(ranges.$z-index);
	@include pointer-events;
}

@at-root {
	@include core.shadows-from-map(maps.$shadow);
	// @include core.overflow;
	// @include core.z-index-from-range(ranges.$z-index);
	// @include core.pointer-events;

	// /*! @zaydek/duomo | MIT License | https://github.com/zaydek/duomo */
	// @include preflight;
	// @include props;
	// @each $key, $value in maps.$breakpoint {
	// 	@media (min-width: #{px($value)}) {
	// 		.#{$key} {
	// 			@at-root {
	// 				@include props;
	// 			}
	// 		}
	// 	}
	// }
}
