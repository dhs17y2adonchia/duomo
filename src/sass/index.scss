@use "vars/maps/index" as maps;
@use "vars/ranges/index" as ranges;

@use "mixins/new_colors" as colors;

@use "utils/generators";

@import "mixins/border-radius";
@import "mixins/box-shadow";
@import "mixins/debugger";
@import "mixins/display";
@import "mixins/grid";
@import "mixins/macos-retina";
@import "mixins/margin";
@import "mixins/overflow";
@import "mixins/padding";
@import "mixins/pointer-events";
@import "mixins/position";
@import "mixins/stacks";
@import "mixins/stagger";
@import "mixins/tailwind-base";
@import "mixins/text";
@import "mixins/width-and-height";
@import "mixins/z-index";

@import "utils/conv-functions";
@import "utils/generate-from-map";
@import "utils/generate-from-range";
@import "utils/get-dynamic-ampersand";
@import "utils/safe-functions";

$separator: "\\:";

@mixin preflight {
	/* purgecss start ignore */
	html {
		@include generators.custom-props-from-map(maps.$font-stack);
		@include generators.custom-props-from-map(maps.$shadow);
		@include generators.custom-props-from-map(maps.$timing-function);
	}

	// TODO: `tailwind-base` can extend custom props.
	@include tailwind-base;
	@include macos-retina;
	@include stagger;
	@include debugger;
	/* purgecss end ignore */
}

@mixin props {
	@include display;
	@include stacks-from-range(ranges.$standard, rem);
	// @include grid-from-range(vars.$range); // FIXME
	@include margin-from-range(join(join(ranges.$negative, auto), ranges.$standard), rem);
	@include padding-from-range(ranges.$standard, rem);
	@include position-from-range((0)); // No range
	@include width-from-range(ranges.$standard, rem);

	// TODO: We need a function to interpolate a breakpoint map.
	// @include width-from-range(($xs, $sm, $md, $lg, $xl), px);
	// // TODO
	// $amp: get-dynamic-ampersand();
	// @each $key, $value in ("full": 100%, "screen": 100vw) {
	// 	#{$amp}w-#{$key} {
	// 		width: #{$value};
	// 	}
	// }

	@include max-width-from-map(maps.$breakpoint, px);
	@include height-from-range(ranges.$standard, rem);
	@include text-align;
	@include font-style;
	@include font-weight;
	@include font-size-from-range(ranges.$font-size, rem);
	// @include leading-from-map(ranges.$leading, passthrough);
	@include line-decoration;

	@if not & {
		@include colors.color(maps.$color, ranges.$alpha);
		@include colors.background-color(maps.$color, ranges.$alpha);
		@include colors.border-color(maps.$color, ranges.$alpha);
	}

	@include border-radius-from-range(ranges.$border-radius, rem);
	@include box-shadow-from-named-map(maps.$shadow); // Do we need `named-map`?
	@include overflow;
	@include z-index-from-range(ranges.$z-index);
	@include pointer-events;
}

@at-root {
	/*! @zaydek/duomo | MIT License | https://github.com/zaydek/duomo */
	@include preflight;
	@include props;
	@each $key, $value in maps.$breakpoint {
		@media (min-width: #{px($value)}) {
			.#{$key} {
				@at-root {
					@include props;
				}
			}
		}
	}
}
