@use "sass:list";

@use "core";
@use "meta";
@use "user";
@use "util";

@mixin preflight {
	/* purgecss start ignore */
	@include meta.tailwind-base;
	// prettier-ignore
	@include meta.custom-props-from-maps(
		user.$font-family-map,
		user.$box-shadow-map,
		user.$timing-function-map,
	);
	@include meta.macos-retina;
	@include meta.stagger;
	@include meta.debugger;
	/* purgecss end ignore */
}

// @function range-from-map($map) {
// 	$range: ();
// 	@each $k, $v in $map {
// 		$range: list.append($range, $v);
// 	}
// 	@return $range;
// }

// TODO: Debug something.

@mixin props {
	// TODO: Move `container` to `width` submodule.
	// @include core.container-from-breakpoint-map($breakpoint-map: user.$breakpoint-map);

	// @if false {
	@include core.display;
	@include core.stack-from-range($range: user.$standard-range, $resolver: rem);
	@include core.grid-from-range($range: user.$standard-range, $resolver: rem);
	@include core.margin-from-range(
		// $range: list.join(list.join(user.$negative-range, auto), user.$standard-range),
		$range: list.join(user.$negative-range, user.$standard-range),
		$resolver: rem
	);
	@include core.padding-from-range($range: user.$standard-range, $resolver: rem);
	@include core.position-from-range(
		// prettier-ignore
		$range: (0),
		$resolver: rem
	);
	@include core.tooltip;
	// }

	// @include width-from-range(ranges.$standard, rem);
	// TODO: We need a function to interpolate a breakpoint map.
	// @include width-from-range(($xs, $sm, $md, $lg, $xl), px);
	// // TODO
	// $amp: get-dynamic-ampersand();
	// @each $key, $value in ("full": 100%, "screen": 100vw) {
	// 	#{$amp}w-#{$key} {
	// 		width: #{$value};
	// 	}
	// }
	// @include max-width-from-map(maps.$breakpoint, px);
	// @include height-from-range(ranges.$standard, rem);

	// @include core.text-align;
	// @include core.font-style;
	// @include core.font-weight;
	// @include core.font-size-from-range(ranges.$font-size, rem);
	// @include core.leading-from-map(ranges.$leading, passthrough);
	// @include core.line-decoration;

	// @if false {
	@if not & {
		@include core.color-from-map($map: user.$color-map, $alpha-range: user.$alpha-range);
		@include core.background-color-from-map($map: user.$color-map, $alpha-range: user.$alpha-range);
	}
	@include core.border-width-from-range($range: user.$border-width-range, $resolver: rem);
	@if not & {
		@include core.border-color-from-map($map: user.$color-map, $alpha-range: user.$alpha-range);
	}
	@include core.border-radius-from-range($range: user.$border-radius-range, $resolver: rem);
	@include core.box-shadow-from-map($map: user.$box-shadow-map);
	@include core.overflow;
	@include core.z-index-from-range($range: user.$z-index-range);
	@include core.pointer-events;
	// }
}

@at-root {
	/*! @zaydek/duomo | MIT License | https://github.com/zaydek/duomo */
	// @include preflight;

	@include props;
	@each $key, $value in user.$breakpoint-map {
		@media (min-width: #{util.px($value)}) {
			.#{$key} {
				@at-root {
					@include props;
				}
			}
		}
	}
}
