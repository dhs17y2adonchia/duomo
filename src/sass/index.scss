@use "sass:list";

@use "core";
@use "meta";
@use "user";
@use "util";

@forward "theme";
@forward "user";

@mixin preflight {
	/* purgecss start ignore */
	@include meta.tailwind-base;
	@include meta.vendored-font-smoothing;
	// @include meta.custom-props-from-maps(user.$font-family-map, user.$box-shadow-map, user.$timing-function-map);

	// prettier-ignore
	@include meta.custom-props-from-maps(
		(shorthand: "font",   map: user.$font-family-map),
		(shorthand: "shadow", map: user.$box-shadow-map),
		(shorthand: "timing", map: user.$timing-function-map),
	);

	// @include meta.custom-props-from-maps($shorthand: "font", $map: user.$font-family-map);
	// @include meta.custom-props-from-maps($shorthand: "shadow", $map: user.$box-shadow-map);
	// @include meta.custom-props-from-maps($shorthand: "timing", $map: user.$timing-function-map);

	@include meta.stagger;
	@include meta.debugger;
	/* purgecss end ignore */
}

$__no-range: (0);

@mixin props {
	@include core.group;
	@include core.display;
	@include core.stack-from-range($range: user.$standard-range, $resolver: rem);
	@include core.grid-from-range($range: user.$standard-range, $resolver: rem);
	@include core.margin-from-range($range: list.join(user.$negative-range, user.$standard-range), $resolver: rem);
	@include core.padding-from-range($range: user.$standard-range, $resolver: rem);
	@include core.position-from-range($range: $__no-range, $resolver: rem);
	@include core.tooltip;
	@include core.width-from-range($range: user.$standard-range, $resolver: rem);
	@include core.max-width-from-breakpoint-map($breakpoint-map: user.$breakpoint-map);
	@include core.container-from-breakpoint-map($breakpoint-map: user.$breakpoint-map);
	@include core.height-from-range($range: user.$standard-range, $resolver: rem);
	@include core.min-height;
	// NOTE: Only `core.font-size-from-range` generates responsive variants.
	@if not & {
		@include core.whitespace;
		@include core.text-align;
		@include core.font-weight;
	}
	@include core.font-size-from-range($range: user.$font-size-range, $resolver: rem);
	@if not & {
		@include core.line-height-from-range($range: user.$line-height-range);
		@include core.text-decoration;
	}
	@if not & {
		@include core.color-from-map($map: user.$color-map, $alpha-range: user.$alpha-range);
		@include core.background-color-from-map($map: user.$color-map, $alpha-range: user.$alpha-range);
		@include core.border-width-from-range($range: user.$border-width-range, $resolver: rem);
		@include core.border-color-from-map($map: user.$color-map, $alpha-range: user.$alpha-range);
	}
	@include core.border-radius-from-range($range: user.$border-radius-range, $resolver: rem);
	@include core.box-shadow-from-map($map: user.$box-shadow-map);
	@include core.overflow;
	@include core.z-index-from-range($range: user.$z-index-range);
	@include core.pointer-events;
}

@at-root {
	/*! @zaydek/duomo | MIT License | https://github.com/zaydek/duomo */
	@include preflight;
	@include props;
	@each $key, $value in user.$breakpoint-map {
		@media (min-width: #{util.px($value)}) {
			.#{$key} {
				@at-root {
					@include props;
				}
			}
		}
	}
}
