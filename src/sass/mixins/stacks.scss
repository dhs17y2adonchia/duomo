@mixin stacks-from-range($range, $conv-fn) {
	$amp: get-dynamic-ampersand();

	#{$amp}hstack {
		display: flex;
		flex-direction: row;
		justify-content: center;
	}
	// NOTE: The root stack context resets `--space`.
	@if not & {
		.hstack > * {
			--space: 0;
		}
	}
	#{$amp}hstack > * + * {
		margin-top: 0;
		margin-left: var(--space, 0);
	}
	// NOTE: Omit `spacer`s and sibling elements from `var(--space)`.
	#{$amp}hstack > .spacer:empty,
	#{$amp}hstack > .spacer:empty + * {
		margin-left: 0;
	}

	#{$amp}vstack {
		display: flex;
		flex-direction: column;
		justify-content: center;
	}
	// NOTE: The root stack context resets `--space`.
	@if not & {
		.vstack > * {
			--space: 0;
		}
	}
	#{$amp}vstack > * + * {
		margin-left: 0;
		margin-top: var(--space, 0);
	}
	// NOTE: Omit `spacer`s and sibling elements from `var(--space)`.
	#{$amp}vstack > .spacer:empty,
	#{$amp}vstack > .spacer:empty + * {
		margin-top: 0;
	}

	#{$amp}align-start {
		align-items: flex-start;
	}
	#{$amp}align-center {
		align-items: center;
	}
	#{$amp}align-end {
		align-items: flex-end;
	}
	#{$amp}align-baseline {
		align-items: baseline;
	}
	// #{$amp}-stretch {
	// 	align-items: stretch;
	// }

	@if not & {
		.spacer {
			flex-grow: 1;
			flex-shrink: 0;
			flex-basis: var(--space, 0);
		}
		// NOTE: Edge `spacer`s are collapsible to `0`.
		.spacer:first-child,
		.spacer:last-child {
			flex-basis: 0;
		}
	}

	@each $value in $range {
		#{$amp}space-#{$value} > * {
			--space: #{call(get-function($conv-fn), $value)};
		}
	}

	@for $value from -1 through 12 {
		$negative: if(safe-compare-negative($value), "-", "");
		#{$amp}#{$negative}order-#{safe-abs($value)} {
			order: #{$value};
		}
	}
}
