@mixin stacks-from-range($range, $conv-fn) {
	$ampersand: get-dynamic-ampersand();

	#{$ampersand}hstack {
		display: flex;
		flex-direction: row;
		justify-content: center;
	}
	#{$ampersand}hstack > * + * {
		--spacing: 0;
		margin-top: 0;
		margin-left: var(--spacing, 0);
	}
	#{$ampersand}hstack > .spacer:empty,
	#{$ampersand}hstack > .spacer:empty + * {
		margin-left: 0;
	}

	#{$ampersand}vstack {
		display: flex;
		flex-direction: column;
		justify-content: center;
	}
	#{$ampersand}vstack > * + * {
		--spacing: 0;
		margin-left: 0;
		margin-top: var(--spacing, 0);
	}
	#{$ampersand}vstack > .spacer:empty,
	#{$ampersand}vstack > .spacer:empty + * {
		margin-top: 0;
	}

	@each $key, $value in ("stretch": stretch, "start": flex-start, "center": center, "end": flex-end) {
		#{$ampersand}align-#{$key} {
			align-items: #{$value};
		}
	}

	#{$ampersand}spacer {
		flex-grow: 1;
		flex-shrink: 0;
		flex-basis: var(--spacing, 0);
	}
	#{$ampersand}spacer:first-child,
	#{$ampersand}spacer:last-child {
		flex-basis: 0;
	}

	@each $value in $range {
		#{$ampersand}s-#{$value} > * {
			--spacing: #{call(get-function($conv-fn), $value)};
		}
		// // NOTE: Reset `--spacing`. Do not use `stack { --spacing: 0; }` because of order precedence.
		// #{$ampersand}s-#{$value} > * > * {
		// 	--spacing: 0;
		// }
	}

	@for $value from -1 through 12 {
		$negative: if(safe-compare-negative($value), "-", "");
		#{$ampersand}#{$negative}order-#{safe-abs($value)} {
			order: #{$value};
		}
	}
}
